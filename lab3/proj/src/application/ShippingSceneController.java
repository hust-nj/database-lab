package application;

import javafx.fxml.FXML;

import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.TextField;
import javafx.scene.control.TableColumn.CellEditEvent;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Iterator;

import javax.swing.JOptionPane;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.ComboBox;

import javafx.scene.input.MouseEvent;

import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;

public class ShippingSceneController extends SetProperty{
	@FXML
	private ComboBox<String> goodsComboBox;
	@FXML
	private TextField amountTextField;
	@FXML
	private Button addAmountButton;
	@FXML
	private TableView<ShippingInformation> shippingTableView;
	@FXML
	private TableColumn<ShippingInformation, Number> idCol;
	@FXML
	private TableColumn<ShippingInformation, String> gnoCol;
	@FXML
	private TableColumn<ShippingInformation, String> nameCol;
	@FXML
	private TableColumn<ShippingInformation, String> placeCol;
	@FXML
	private TableColumn<ShippingInformation, String> factoryCol;
	@FXML
	private TableColumn<ShippingInformation, String> amountCol;
	@FXML
	private TableColumn<ShippingInformation, CheckBox> choiceCol;
	@FXML
	private Button ensureShippingButton;
	@FXML
	private Button clearShippingButton;
	@FXML
	private Button deleteShippingButton;
	@FXML
	private ComboBox<String> inquireSnoChooseComboBox;
	@FXML
	private TableView<InquireShippingInformation> inquireTableView;
	@FXML
	private TableColumn<InquireShippingInformation, Number> inquireIdCol;
	@FXML
	private TableColumn<InquireShippingInformation, String> inquireGnoCol;
	@FXML
	private TableColumn<InquireShippingInformation, String> inquireNameCol;
	@FXML
	private TableColumn<InquireShippingInformation, String> inquirePlaceCol;
	@FXML
	private TableColumn<InquireShippingInformation, String> inquireFactoryCol;
	@FXML
	private TableColumn<InquireShippingInformation, Number> inquireAmountCol;
	@FXML
	private ComboBox<String> inquireStateChooseComboBox;
	@FXML
	private TableView<ShippingInformation> modifyTableView;
	@FXML
	private TableColumn<ShippingInformation, Number> modifyIdCol;
	@FXML
	private TableColumn<ShippingInformation, String> modifyGnoCol;
	@FXML
	private TableColumn<ShippingInformation, String> modifyNameCol;
	@FXML
	private TableColumn<ShippingInformation, String> modifyPlaceCol;
	@FXML
	private TableColumn<ShippingInformation, String> modifyFactoryCol;
	@FXML
	private TableColumn<ShippingInformation, String> modifyAmountCol;
	@FXML
	private TableColumn<ShippingInformation, CheckBox> modifyChoiceCol;
	@FXML
	private Button ensureModifyButton;
	@FXML
	private Button cancelShippingButton;
	@FXML
	private Button deleteModifyButton;
	@FXML
	private ComboBox<String> modifySnoChooseComboBox;
	
	private String inquireSno = "";
	private String modifySno = "";

	// Event Listener on ComboBox[#goodsComboBox].onMouseClicked
	@FXML
	public void OnClickGoodsComboBox(MouseEvent event) {
		// TODO Autogenerated
		Statement statement = null;
		ResultSet resultSet = null;
		ObservableList<String> options = FXCollections.observableArrayList();
		String sql = null;
		
		try {
			statement = connection.createStatement();
			sql = "SELECT goods.`name` FROM goods";
			resultSet = statement.executeQuery(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			while (resultSet.next()) {
				String name = resultSet.getString(1);
				options.add(name);
				}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		goodsComboBox.setItems(options);
		
		try {
			resultSet.close();
			statement.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	// Event Listener on Button[#addAmountButton].onAction
	@FXML
	public void OnClickAddAmountButton(ActionEvent event) {
		// TODO Autogenerated
		String name;
		Integer amount = 0;
		String stringamount;
		
		stringamount = amountTextField.getText();
		if (stringamount == null 
				|| stringamount.equals("")) {
			JOptionPane.showMessageDialog(null, "出货量输入内容为空，请重新输入！", "error", JOptionPane.INFORMATION_MESSAGE);
			return;
		}
		
		try {
			amount = Integer.parseInt(stringamount);
		} catch (NumberFormatException e) {
			// TODO: handle exception
			amount = 0;
			JOptionPane.showMessageDialog(null, "出货量不为整数，请重新输入！", "error", JOptionPane.INFORMATION_MESSAGE);
			return;
		}
		
		name = goodsComboBox.getValue();
		if (name == null 
				|| name.equals("")) {
			JOptionPane.showMessageDialog(null, "未选择货品名称，请选择产品！", "error", JOptionPane.INFORMATION_MESSAGE);
			return;
		}
		
		goodsComboBox.setValue("");
		amountTextField.setText("");
		
		
		//修改TableView
		Statement statement = null;
		ResultSet resultSet = null;
		String sql = null;
		
		String gno = "";
		String place = "";
		String factory = "";
		
		try {
			statement = connection.createStatement();
			sql = "SELECT goods.gno, goods.place, goods.factory FROM goods WHERE goods.`name` = '"
					+ name
					+ "'";
			resultSet = statement.executeQuery(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			while (resultSet.next()) {
				gno = resultSet.getString(1);
				place = resultSet.getString(2);
				factory = resultSet.getString(3);
				break;
				}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		try {
			resultSet.close();
			statement.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		ObservableList<ShippingInformation> data = shippingTableView.getItems();
		ObservableList<ShippingInformation> newdata = FXCollections.observableArrayList();
		
		if (data == null) {
			String tempstring = amount.toString();
			newdata.add(new ShippingInformation(1, gno, name, place, factory, tempstring));
			shippingTableView.setItems(newdata);
			return;
		}
		
		boolean flag = false;
		Iterator<ShippingInformation> iterator = data.iterator();
		while (iterator.hasNext()) {
			ShippingInformation temp = iterator.next();
			if(temp.getName().equals(name))
			{
				flag = true;
				String tempstring = (amount+ Integer.parseInt(temp.getAmount())) + "";
				System.out.println(tempstring);
				temp.setAmount(tempstring);
				ShippingInformation newtemp = new ShippingInformation(temp.getId(), 
						temp.getGno(), temp.getName(), temp.getPlace(), 
						temp.getFactory(), tempstring);
				newdata.add(newtemp);
			}
			else {
				newdata.add(temp);
			}
			
		}

		if(!flag)
		{
			int id = data.size() + 1;
			String tempstring = amount.toString();
			newdata.add(new ShippingInformation(id, gno, name, place, factory, tempstring));
		}
		shippingTableView.setItems(newdata);
	}
	// Event Listener on Button[#ensureShippingButton].onAction
	@FXML
	public void OnClickEnsureShippingButton(ActionEvent event) {
		// TODO Autogenerated
		ObservableList<ShippingInformation> data = shippingTableView.getItems();
		
		if (data.size() == 0) {
			JOptionPane.showMessageDialog(null, "出货单为空！", "error", JOptionPane.INFORMATION_MESSAGE);
			return;
		}
		
		Statement statement = null;
		ResultSet resultSet = null;
		String sql = null;
		String sno = "000001";
		
		try {
			statement = connection.createStatement();
			sql = "SELECT MAX(shipping.sno) FROM shipping";
			System.out.println(sql);
			resultSet = statement.executeQuery(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			while (resultSet.next()) {
				sno = String.format("%06d", resultSet.getInt(1) + 1);
				}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		try {
			resultSet.close();
			statement.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//插入出货单
		try {
			statement = connection.createStatement();
			sql = "INSERT INTO shipping VALUES('"
					+ sno
					+ "', 1, NULL, '"
					+ main.getEno()
					+ "', NULL);";
			System.out.println(sql);
			statement.executeUpdate(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			statement.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		JOptionPane.showMessageDialog(null, "插入出货单成功！", "success", JOptionPane.INFORMATION_MESSAGE);
		
		//插入出货_包含
		data = FXCollections.observableArrayList();
		data = shippingTableView.getItems();
		ShippingInformation temp = null;
		String gno = null;
		String amount = null;
		
		Iterator<ShippingInformation> iterator = data.iterator();
		while (iterator.hasNext()) {
			temp = iterator.next();
			gno = temp.getGno();
			amount = temp.getAmount();
			
			try {
				statement = connection.createStatement();
				sql = "INSERT INTO shipping_include VALUES('"
						+ sno
						+ "', '"
						+ gno
						+ "', "
						+ amount
						+ ")";
				statement.executeUpdate(sql);
				System.out.println(sql);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {
				statement.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		shippingTableView.setItems(null);
	}
	// Event Listener on Button[#clearShippingButton].onAction
	@FXML
	public void OnClickClearShippingButton(ActionEvent event) {
		// TODO Autogenerated
		shippingTableView.setItems(null);
	}
	// Event Listener on Button[#deleteShippingButton].onAction
	@FXML
	public void OnClickDeleteShippingButton(ActionEvent event) {
		// TODO Autogenerated
		ObservableList<ShippingInformation> data = shippingTableView.getItems();
		ObservableList<ShippingInformation> newdata = FXCollections.observableArrayList();
		
		int id = 1;
		String amount;
		String gno;
		String name;
		String place;
		String factory;
		
		Iterator<ShippingInformation> iterator = data.iterator();
		while (iterator.hasNext()) {
			ShippingInformation temp = iterator.next();
			if(!temp.getMyCheckBox().isSelected())
			{
				amount = temp.getAmount();
				gno = temp.getGno();
				name = temp.getName();
				place = temp.getPlace();
				factory = temp.getFactory();
				newdata.add(new ShippingInformation(id, gno, name, place, factory, amount));
				id++;
			}
		}

		shippingTableView.setItems(newdata);
	}
	// Event Listener on ComboBox[#inquireSnoChooseComboBox].onMouseClicked
	@FXML
	public void OnClickInquireSnoChooseComboBox(MouseEvent event) {
		// TODO Autogenerated
		Statement statement = null;
		ResultSet resultSet = null;
		ObservableList<String> options = FXCollections.observableArrayList();
		String sql = null;
		
		String text = inquireStateChooseComboBox.getValue();
		if (text.equals("待审核")) {
			sql = "SELECT shipping.sno FROM shipping WHERE shipping.state = 1";
		}
		else if (text.equals("缺货登记")) {
			sql = "SELECT shipping.sno FROM shipping WHERE shipping.state = 2";
		}
		else {
			sql = "SELECT shipping.sno FROM shipping WHERE shipping.state = 3";
		}
		
		try {
			statement = connection.createStatement();
			resultSet = statement.executeQuery(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			while (resultSet.next()) {
				String sno = resultSet.getString(1);
				options.add(sno);
				}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		inquireSnoChooseComboBox.setItems(options);
		
		try {
			resultSet.close();
			statement.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	// Event Listener on Button[#ensureModifyButton].onAction
	@FXML
	public void OnClickEnsureModifyButton(ActionEvent event) {
		// TODO Autogenerated
		String sno = modifySnoChooseComboBox.getValue();
		
		if (sno == null) {
			JOptionPane.showMessageDialog(null, "未选择货单，请重新选择！", "error", JOptionPane.INFORMATION_MESSAGE);
			return;
		}
		
		Statement statement = null;
		ResultSet resultSet = null;
		String sql = null;

		try {
			statement = connection.createStatement();
			sql = "SELECT state "
					+ "FROM shipping "
					+ "WHERE sno = '"
					+ sno
					+ "'";
			resultSet = statement.executeQuery(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			while (resultSet.next()) {
				
				int state = resultSet.getInt(1);
				if (state != 1) {
					modifyTableView.setItems(null);
					modifySnoChooseComboBox.setItems(null);
					JOptionPane.showMessageDialog(null, "该货单已经通过审核，无法修改！", "error", JOptionPane.INFORMATION_MESSAGE);
					return;
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		try {
			resultSet.close();
			statement.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		//删除原有进货包含
		try {
			statement = connection.createStatement();
			sql = "DELETE FROM shipping_include "
					+ "WHERE sno = '"
					+ sno
					+ "'";
			statement.executeUpdate(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			statement.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		//插入进货_包含
		ObservableList<ShippingInformation> data = modifyTableView.getItems();
		ShippingInformation temp = null;
		String gno = null;
		String amount = null;
		
		System.out.println(modifyTableView.getItems().size());
		Iterator<ShippingInformation> iterator = data.iterator();
		while (iterator.hasNext()) {
			temp = iterator.next();
			gno = temp.getGno();
			amount = temp.getAmount();
			try {
				statement = connection.createStatement();
				sql = "INSERT INTO shipping_include VALUES('"
						+ sno
						+ "', '"
						+ gno
						+ "', "
						+ amount
						+ ");";
				statement.executeUpdate(sql);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {
				statement.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		if (inquireSno.equals(sno)) {
			inquireSno = "";
		}
		
		modifySno = "";
		modifyTableView.setItems(null);
		modifySnoChooseComboBox.setItems(null);
		
		JOptionPane.showMessageDialog(null, "修改出货单成功！", "success", JOptionPane.INFORMATION_MESSAGE);
	}
	// Event Listener on Button[#cancelShippingButton].onAction
	@FXML
	public void OnClickCancelShippingButton(ActionEvent event) {
		// TODO Autogenerated
		String sno = modifySnoChooseComboBox.getValue();
		if (sno == null) {
			JOptionPane.showMessageDialog(null, "未选择订单，请重新选择！", "error", JOptionPane.INFORMATION_MESSAGE);
			return;
		}
		
		ObservableList<ShippingInformation> data = FXCollections.observableArrayList();
		modifyTableView.setItems(data);
		modifySnoChooseComboBox.setValue(null);
		
		Statement statement = null;
		ResultSet resultSet = null;
		String sql = null;

		try {
			statement = connection.createStatement();
			sql = "SELECT state "
					+ "FROM shipping "
					+ "WHERE sno = '"
					+ sno
					+ "'";
			resultSet = statement.executeQuery(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			while (resultSet.next()) {
				int state = resultSet.getInt(1);
				if (state != 1) {
					JOptionPane.showMessageDialog(null, "该订单已经通过审核，无法取消！", "error", JOptionPane.INFORMATION_MESSAGE);
					return;
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		try {
			resultSet.close();
			statement.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			statement = connection.createStatement();
			sql = "DELETE FROM shipping WHERE sno = '"
					+ sno
					+ "'";
			statement.executeUpdate(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			statement.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	// Event Listener on Button[#deleteModifyButton].onAction
	@FXML
	public void OnClickDeleteModifyButton(ActionEvent event) {
		// TODO Autogenerated
		ObservableList<ShippingInformation> data = modifyTableView.getItems();
		ObservableList<ShippingInformation> newdata = FXCollections.observableArrayList();
		
		int id = 1;
		String amount;
		String gno;
		String name;
		String place;
		String factory;
		
		Iterator<ShippingInformation> iterator = data.iterator();
		while (iterator.hasNext()) {
			ShippingInformation temp = iterator.next();
			if(!temp.getMyCheckBox().isSelected())
			{
				amount = temp.getAmount();
				gno = temp.getGno();
				name = temp.getName();
				place = temp.getPlace();
				factory = temp.getFactory();
				newdata.add(new ShippingInformation(id, gno, name, place, factory, amount));
				id++;
			}
		}

		modifyTableView.setItems(newdata);
	}
	// Event Listener on ComboBox[#modifySnoChooseComboBox].onMouseClicked
	@FXML
	public void OnClickModifySnoChooseComboBox(MouseEvent event) {
		// TODO Autogenerated
		Statement statement = null;
		ResultSet resultSet = null;
		ObservableList<String> options = FXCollections.observableArrayList();
		String sql = null;
		
		//只能修改自己的
		sql = "SELECT sno "
				+ "FROM shipping "
				+ "WHERE state = 1 AND provide_eno = '"
				+ main.getEno()
				+ "'";
		
		try {
			statement = connection.createStatement();
			resultSet = statement.executeQuery(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			while (resultSet.next()) {
				String sno = resultSet.getString(1);
				options.add(sno);
				}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		modifySnoChooseComboBox.setItems(options);
		
		try {
			resultSet.close();
			statement.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void OnActionInquireSnoChooseComboBox(ActionEvent event)
	{
		String sno = inquireSnoChooseComboBox.getValue();
		if (sno == null) {
			return;
		}
		if (sno.equals(inquireSno)) {
			return;
		}
		
		inquireSno = sno;

		ObservableList<InquireShippingInformation> data = FXCollections.observableArrayList();
		
		//更新TableView
		Statement statement = null;
		ResultSet resultSet = null;
		String sql = null;
		
		Integer id = 1;
		Integer amount;
		String gno = "";
		String name = "";
		String place = "";
		String factory = "";
		
		try {
			statement = connection.createStatement();
			sql = "SELECT shipping_include.gno, goods.`name`, "
					+ "goods.place, goods.factory, shipping_include.amount "
					+ "FROM shipping_include, goods "
					+ "WHERE shipping_include.sno = '"
					+ sno
					+ "' AND shipping_include.gno = goods.gno";
			resultSet = statement.executeQuery(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			while (resultSet.next()) {
				gno = resultSet.getString(1);
				name = resultSet.getString(2);
				place = resultSet.getString(3);
				factory = resultSet.getString(4);
				amount = resultSet.getInt(5);
				data.add(new InquireShippingInformation(id, gno, name, place, factory, amount));
				id += 1;
				}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		try {
			resultSet.close();
			statement.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		inquireTableView.setItems(data);
	}
	
	public void OnActionModifySnoChooseComboBox(ActionEvent event)
	{
		String sno = modifySnoChooseComboBox.getValue();
		if (sno == null) {
			return;
		}
		if (sno.equals(modifySno)) {
			return;
		}
		
		modifySno = sno;
		
		ObservableList<ShippingInformation> data = FXCollections.observableArrayList();
		
		//更新TableView
		Statement statement = null;
		ResultSet resultSet = null;
		String sql = null;
		
		Integer id = 1;
		Integer amount;
		String gno = "";
		String name = "";
		String place = "";
		String factory = "";
		
		try {
			statement = connection.createStatement();
			sql = "SELECT shipping_include.gno, goods.`name`, goods.place, "
					+ "goods.factory, shipping_include.amount "
					+ "FROM shipping_include, goods "
					+ "WHERE shipping_include.sno = '"
					+ sno
					+ "' AND shipping_include.gno = goods.gno";
			resultSet = statement.executeQuery(sql);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			while (resultSet.next()) {
				gno = resultSet.getString(1);
				name = resultSet.getString(2);
				place = resultSet.getString(3);
				factory = resultSet.getString(4);
				amount = resultSet.getInt(5);
				String tempstring = amount.toString();
				data.add(new ShippingInformation(id, gno, name, place, factory, tempstring));
				id += 1;
				}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		try {
			resultSet.close();
			statement.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		modifyTableView.setItems(data);
	}
	
	@Override
	void setMain(Main main) {
		// TODO Auto-generated method stub
		super.setMain(main);
		myinitialize();
	}
	
	private void myinitialize() {
		// TODO Auto-generated method stub
		idCol.setCellValueFactory(new PropertyValueFactory<>("id"));
		amountCol.setCellValueFactory(new PropertyValueFactory<>("amount"));
		factoryCol.setCellValueFactory(new PropertyValueFactory<>("factory"));
		gnoCol.setCellValueFactory(new PropertyValueFactory<>("gno"));
		nameCol.setCellValueFactory(new PropertyValueFactory<>("name"));
		placeCol.setCellValueFactory(new PropertyValueFactory<>("place"));
		choiceCol.setCellValueFactory(cellData -> cellData.getValue().getMyCheckBox().getCheckBox());
		
		inquireIdCol.setCellValueFactory(new PropertyValueFactory<>("id"));
		inquireAmountCol.setCellValueFactory(new PropertyValueFactory<>("amount"));
		inquireFactoryCol.setCellValueFactory(new PropertyValueFactory<>("factory"));
		inquireGnoCol.setCellValueFactory(new PropertyValueFactory<>("gno"));
		inquireNameCol.setCellValueFactory(new PropertyValueFactory<>("name"));
		inquirePlaceCol.setCellValueFactory(new PropertyValueFactory<>("place"));
		
		modifyIdCol.setCellValueFactory(new PropertyValueFactory<>("id"));
		modifyAmountCol.setCellValueFactory(new PropertyValueFactory<>("amount"));
		modifyFactoryCol.setCellValueFactory(new PropertyValueFactory<>("factory"));
		modifyGnoCol.setCellValueFactory(new PropertyValueFactory<>("gno"));
		modifyNameCol.setCellValueFactory(new PropertyValueFactory<>("name"));
		modifyPlaceCol.setCellValueFactory(new PropertyValueFactory<>("place"));
		modifyChoiceCol.setCellValueFactory(cellData -> cellData.getValue().getMyCheckBox().getCheckBox());
		
		modifyAmountCol.setCellFactory(TextFieldTableCell.<ShippingInformation>forTableColumn());
		modifyAmountCol.setOnEditCommit(
			    (CellEditEvent<ShippingInformation, String> t) -> {
			        ((ShippingInformation) t.getTableView().getItems().get(
			            t.getTablePosition().getRow())
			            ).setAmount(t.getNewValue());
			});	
		
		ObservableList<String> options = FXCollections.observableArrayList("待审核", "缺货登记", "审核通过");
		inquireStateChooseComboBox.setItems(options);
		
		inquireStateChooseComboBox.setValue("待审核");
	}
}
