-- 查询“张三”用户关注的所有用户的ID号、姓名、性别、出生年份，所在城市，并且按照出生年份的降序排列，同一个年份的则按照用户ID号升序排列。
SELECT *
FROM USERS X
WHERE X.UID IN (
SELECT FOLLOW.UIDFLED
FROM USERS Y, FOLLOW
WHERE Y.NAME = '张三' AND Y.UID = FOLLOW.UID
)
ORDER BY BYEAR DESC, UID ASC;

-- 查找没有被任何人点赞的博文ID、标题以及发表者姓名，并将结果按照标题字符顺序排列。
SELECT MBLOG.BID, MBLOG.TITLE, USERS.NAME
FROM MBLOG, USERS
WHERE USERS.UID = MBLOG.UID AND MBLOG.BID NOT IN(
	SELECT BID 
	FROM THUMB
)
ORDER BY TITLE;

-- 查找2000年以后出生的武汉市用户发表的进入过头条的博文ID；
SELECT DISTINCT MBLOG.BID
FROM MBLOG, TOPDAY
WHERE MBLOG.BID = TOPDAY.BID AND MBLOG.UID IN(
	SELECT UID
	FROM USERS
	WHERE BYEAR > 2000 AND CITY = '武汉'
);


-- 查找订阅了所有分类的用户ID；
SELECT UID
FROM SUB
GROUP BY UID
HAVING COUNT(DISTINCT(LID)) = (SELECT COUNT(DISTINCT(LID)) FROM LABEL);
-- 查找出生年份小于1970年或者大于2010年的用户ID、出生年份、所在城市，要求where子句中只能有一个条件表达式；
SELECT UID, BYEAR, CITY
FROM USERS
WHERE BYEAR NOT BETWEEN 1990 AND 2010;
-- 统计每个城市的用户数；
SELECT CITY, COUNT(UID)
FROM USERS
GROUP BY CITY;
-- 统计每个城市的每个出生年份的用户数，并将结果按照城市的升序排列，同一个城市按照出生用户数的降序排列其相应的年份；
SELECT CITY, BYEAR, COUNT(UID) X
FROM USERS
GROUP BY CITY, BYEAR
ORDER BY CITY ASC, X DESC;
-- 查找被点赞数超过10的博文ID号；
SELECT BID
FROM THUMB
GROUP BY BID
HAVING COUNT(*) > 10;
-- 查找被2000年后出生的用户点赞数超过10的博文ID号；
SELECT BID
FROM THUMB
WHERE THUMB.UID IN (
SELECT USERS.UID 
FROM USERS
WHERE USERS.BYEAR > 2000
)
GROUP BY BID
HAVING COUNT(*) > 10;
-- 查找被2000年后出生的用户点赞数超过10的每篇博文的进入头条的次数；
SELECT BID
FROM THUMB
WHERE THUMB.UID IN (
SELECT USERS.UID
FROM USERS
WHERE USERS.BYEAR > 2000
) AND THUMB.BID IN (
SELECT TOPDAY.BID
FROM TOPDAY
)
GROUP BY BID
HAVING COUNT(*) > 10;
-- 查找订阅了文学、艺术、哲学、音乐中至少一种分类的用户ID，要求不能使用嵌套查询，且where子句中最多只能包含两个条件；
SELECT DISTINCT UID
FROM SUB, LABEL
WHERE SUB.LID = LABEL.LID AND LABEL.LNAME IN ('文学','艺术','哲学','音乐');
-- 查找内容中包含了“最多地铁站”和“_华中科技大学”两个词的博文基本信息；
SELECT *
FROM MBLOG
WHERE CONT LIKE '%最多地铁站%\_华中科技大学%' OR CONT LIKE '%\_华中科技大学%最多地铁站%';
-- 查找所有相互关注的用户对的两个ID号，要求不能使用嵌套查询；
SELECT X.UID, Y.UID
FROM FOLLOW X, FOLLOW Y
WHERE X.UID = Y.UIDFLED AND X.UIDFLED = Y.UID;
-- 查找好友圈包含了5号用户好友圈的用户ID；
SELECT USERS.UID
FROM USERS
WHERE NOT EXISTS(
	SELECT USERS.UID
	FROM FRIENDS X
	WHERE X.UID = 5 AND NOT EXISTS(
		SELECT Y.UID
		FROM FRIENDS Y
		WHERE USERS.UID = Y.UID AND X.FUID = Y.FUID
	)
);
-- 查找2019年4月20日每一篇头条博文的ID号、标题以及该博文的每一个分类ID，要求即使该博文没有任何分类ID也要输出其ID号、标题；
SELECT BID, TITLE, LID
FROM TOPDAY NATURAL JOIN MBLOG
NATURAL LEFT OUTER JOIN B_L 
WHERE TYEAR = 2019 AND TMONTH = 4 AND TDAY = 20;
-- 查找至少有3名共同好友的所有用户对的两个ID号。
SELECT X.UID, Y.UID
FROM FRIENDS X, FRIENDS Y
WHERE X.UID < Y.UID AND X.FUID = Y.FUID
GROUP BY X.UID, Y.UID 
HAVING COUNT(*) >= 3;
-- 创建视图：查阅DBMS内部函数，创建一个显示当日热度排名前十的微博信息的视图，其中的属性包括：博文ID、博文标题、发表者ID、发表者姓名、被点赞数。
CREATE VIEW VTOPDAY AS
SELECT MBLOG.BID, MBLOG.TITLE, USERS.UID, USERS.NAME, COUNT(*)
FROM MBLOG, USERS, THUMB, TOPDAY
WHERE MBLOG.UID = USERS.UID AND MBLOG.BID = TOPDAY.BID AND THUMB.BID = MBLOG.BID
GROUP BY MBLOG.BID, MBLOG.TITLE, USERS.UID, USERS.NAME;